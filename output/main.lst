CC5X Version 3.8C,   File: main.c               2. Apr 2025  14:34   Page 1

ADDR CODE  LINE SOURCE

           0001 
           0002 ; CC5X Version 3.8C, Copyright (c) B Knudsen Data
           0003 ; C compiler for the PICmicro family
           0004 ; ************   2. Apr 2025  14:34  *************
           0005 
           0006         processor  16F15313
           0007         radix  DEC
           0008 
8008 3FFF  0009         __config 0x8008, 0x3FFF
8009 3F9F  0010         __config 0x8009, 0x3F9F
800A 3FFF  0011         __config 0x800A, 0x3FFF
           0012 
     0000  0013 Carry       EQU   0
     000C  0014 PORTA       EQU   0x0C
     0012  0015 TRISA       EQU   0x12
     088D  0016 OSCCON1     EQU   0x88D
     1F38  0017 ANSELA      EQU   0x1F38
     0000  0018 RA0         EQU   0
     0020  0019 ms          EQU   0x20
     0021  0020 i           EQU   0x21
     0022  0021 j           EQU   0x22
           0022 
0000 2801  0023         GOTO main
           0024 
           0025   ; FILE main.c
           0026                         ;/*
           0027                         ; * Simple blink LED example for PIC16F15313
           0028                         ; * Using CC5X Compiler
           0029                         ; */
           0030                         ;
           0031                         ;#include "16F15313.H"
           0032                         ;#pragma config WDTE = OFF // Disable Watchdog timer
           0033                         ;#pragma config MCLRE = ON // Master Clear Enable
           0034                         ;#pragma config LVP = ON   // Low Voltage Programming Enable
           0035                         ;
           0036                         ;// Function prototypes
           0037                         ;void delay_ms(unsigned int ms);
           0038                         ;void initialize(void);
           0039                         ;
           0040                         ;void main(void) {
           0041 main
           0042                         ;  // Initialize ports
           0043                         ;  initialize();
0001 0140  0044         MOVLB 0
0002 200B  0045         CALL  initialize
           0046                         ;
           0047                         ;  // Main program loop
           0048                         ;  while (1) {
           0049                         ;    // Toggle LED on RA0
           0050                         ;    RA0 = 1; // LED on
0003 0140  0051         MOVLB 0
0004 140C  0052 m001    BSF   0x0C,RA0
           0053                         ;    delay_ms(500);
0005 30F4  0054         MOVLW 244
0006 2014  0055         CALL  delay_ms
           0056                         ;    RA0 = 0; // LED off
0007 100C  0057         BCF   0x0C,RA0
           0058                         ;    delay_ms(500);
0008 30F4  0059         MOVLW 244
0009 2014  0060         CALL  delay_ms
CC5X Version 3.8C,   File: main.c               2. Apr 2025  14:34   Page 2

ADDR CODE  LINE SOURCE

           0061                         ;  }
000A 2804  0062         GOTO  m001
           0063                         ;}
           0064                         ;
           0065                         ;void initialize(void) {
           0066 initialize
           0067                         ;  // Configure port A
           0068                         ;  TRISA = 0b11111110; // RA0 as output, others as inputs
000B 30FE  0069         MOVLW 254
000C 0092  0070         MOVWF TRISA
           0071                         ;  PORTA = 0x00;       // Initialize PORTA
000D 018C  0072         CLRF  PORTA
           0073                         ;
           0074                         ;  // Configure oscillator
           0075                         ;  OSCCON1 = 0x60; // HFINTOSC at 4MHz
000E 3060  0076         MOVLW 96
000F 0151  0077         MOVLB 17
0010 008D  0078         MOVWF OSCCON1
           0079                         ;
           0080                         ;  // Disable analog functionality
           0081                         ;  ANSELA = 0x00;
0011 017E  0082         MOVLB 62
0012 01B8  0083         CLRF  ANSELA
           0084                         ;}
0013 0008  0085         RETURN
           0086                         ;
           0087                         ;void delay_ms(unsigned int ms) {
           0088 delay_ms
0014 00A0  0089         MOVWF ms
           0090                         ;  unsigned int i, j;
           0091                         ;  for (i = 0; i < ms; i++) {
0015 01A1  0092         CLRF  i
0016 0820  0093 m002    MOVF  ms,W
0017 0221  0094         SUBWF i,W
0018 1803  0095         BTFSC 0x03,Carry
0019 281F  0096         GOTO  m004
           0097                         ;    // This loop creates approximately 1ms delay at 4MHz
           0098                         ;    for (j = 0; j < 400; j++) {
001A 01A2  0099         CLRF  j
           0100                         ;      // Empty loop with no inline assembly
           0101                         ;    }
001B 0AA2  0102 m003    INCF  j,1
001C 281B  0103         GOTO  m003
           0104                         ;  }
001D 0AA1  0105         INCF  i,1
001E 2816  0106         GOTO  m002
001F 0008  0107 m004    RETURN
           0108 
           0109         END
           0110 
           0111 
           0112 ; *** KEY INFO ***
           0113 
           0114 ; 0x0014   12 word(s)  0 % : delay_ms
           0115 ; 0x000B    9 word(s)  0 % : initialize
           0116 ; 0x0001   10 word(s)  0 % : main
           0117 
           0118 ; RAM usage: 3 bytes (3 local), 253 bytes free
           0119 ; Maximum call level: 1
           0120 ; Total of 32 code words (1 %)
